#
# SPDX-License-Identifier: Apache-2.0
#
---
- name: Add the anchor peer to the channel
  hosts: localhost
  vars_files:
    - vars/common.yaml
    - vars/api.yaml
    - vars/organizations.yaml
    - vars/channels.yaml
  vars:
    # os_org_name: os # load this using --extra-vars "os_org_name=os"
    # peer_org_name: org1 # load this using --extra-vars "peer_org_name=org1"
    # channel_name: samplechannel1 # load this using --extra-vars "channel_name=samplechannel1"
    ordering_service_name: "{{ vars['ordering_organization'][os_org_name]['orderer']['name'] }}"
    org_msp_admin: "{{ vars['peer_organizations'][peer_org_name]['ca']['id_list'][0]['name'] }}{{ identity_prefix }}.json"
    org_msp_id: "{{ vars['peer_organizations'][peer_org_name]['msp']['id'] }}"
    org_msp_name: "{{ vars['peer_organizations'][peer_org_name]['msp']['name'] }}"
    anchor_peers: "{{ vars['peer_organizations'][peer_org_name]['anchor_peers'] }}"
  tasks:
    - name: Get the ordering service information
      ibm.blockchain_platform.ordering_service_info:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        name: "{{ ordering_service_name }}"
      register: ordering_service

    - name: Fail if the ordering service does not exist
      fail:
        msg: "{{ ordering_service_name }} does not exist"
      when: not ordering_service.exists

    - name: Fetch the channel configuration
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ org_msp_admin }}"
        msp_id: "{{ org_msp_id }}"
        operation: fetch
        name: "{{ channel_name }}"
        path: "{{ channel_config_path }}/{{ channel_name }}-original_config.bin"

    - name: Create a copy of the channel configuration
      copy:
        src: "{{ channel_config_path }}/{{ channel_name }}-original_config.bin"
        dest: "{{ channel_config_path }}/{{ channel_name }}-updated_config.bin"

    - name: Update the organization
      ibm.blockchain_platform.channel_member:
        state: present
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        organization: "{{ org_msp_name }}"
        anchor_peers: "{{ anchor_peers }}"
        path: "{{ channel_config_path }}/{{ channel_name }}-updated_config.bin"

    - name: Compute the channel configuration update
      ibm.blockchain_platform.channel_config:
        operation: compute_update
        name: "{{ channel_name }}"
        original: "{{ channel_config_path }}/{{ channel_name }}-original_config.bin"
        updated: "{{ channel_config_path }}/{{ channel_name }}-updated_config.bin"
        path: "{{ channel_config_path }}/{{ channel_name }}-config_update.bin"
      register: compute_update

    - name: Sign the channel configuration update
      ibm.blockchain_platform.channel_config:
        operation: sign_update
        identity: "{{ org_msp_admin }}"
        msp_id: "{{ org_msp_id }}"
        name: "{{ channel_name }}"
        path: "{{ channel_config_path }}/{{ channel_name }}-config_update.bin"
      when: compute_update.path

    - name: Apply the channel configuration update
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: apply_update
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ org_msp_admin }}"
        msp_id: "{{ org_msp_id }}"
        name: "{{ channel_name }}"
        path: "{{ channel_config_path }}/{{ channel_name }}-config_update.bin"
      when: compute_update.path
