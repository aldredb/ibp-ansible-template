---
- name: Create Peer Organization
  hosts: localhost
  vars_files:
    - vars/common.yaml
    - vars/api.yaml
    - vars/organizations.yaml
  vars:
    # org_name: org1
    - org: "{{ vars['peer_organizations'][org_name] }}"
    - wallet_dir: "{{ playbook_dir }}/{{ wallet_path }}"
  tasks:
    - name: Create certificate authority
      ibm.blockchain_platform.certificate_authority:
        state: "{{ state }}"
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key | default(omit) }}"
        api_secret: "{{ api_secret | default(omit)}}"
        name: "{{ org.ca.name }}"
        zone: "{{ org.ca.zone | default(omit) }}"
        config_override:
          ca:
            registry:
              maxenrollments: -1
              identities:
                - name: "{{ org.ca.admin_enrollment_id }}"
                  pass: "{{ org.ca.admin_enrollment_secret }}"
                  type: client
                  maxenrollments: -1
                  attrs:
                    hf.Registrar.Roles: "*"
                    hf.Registrar.DelegateRoles: "*"
                    hf.Revoker: true
                    hf.IntermediateCA: true
                    hf.GenCRL: true
                    hf.Registrar.Attributes: "*"
                    hf.AffiliationMgr: true
        resources:
          ca:
            requests:
              cpu: "{{ org.ca.resource.vcpu | default('100m') }}"
              memory: "{{ org.ca.resource.memory | default('200M') }}"
        storage:
          ca:
            size: "{{ org.ca.resource.storage | default('20Gi') }}"
        wait_timeout: "{{ wait_timeout | default(900) }}"

    - name: Enroll CA admin
      ibm.blockchain_platform.enrolled_identity:
        state: "{{ state }}"
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key | default(omit) }}"
        api_secret: "{{ api_secret | default(omit)}}"
        certificate_authority: "{{ org.ca.name }}"
        name: "{{ org.ca.admin_name }}"
        enrollment_id: "{{ org.ca.admin_enrollment_id }}"
        enrollment_secret: "{{ org.ca.admin_enrollment_secret }}"
        path: "{{ wallet_dir }}/{{ org.ca.admin_name }}.json"

    - name: Register org admin, peers and monitoring user
      ibm.blockchain_platform.registered_identity:
        state: "{{ state }}"
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key | default(omit) }}"
        api_secret: "{{ api_secret | default(omit)}}"
        certificate_authority: "{{ org.ca.name }}"
        registrar: "{{ wallet_dir }}/{{ org.ca.admin_name }}.json"
        enrollment_id: "{{ item.enrollment_id }}"
        enrollment_secret: "{{ item.enrollment_secret }}"
        type: "{{ item.type }}"
      loop: "{{ org.ca.id_list }}"

    - name: Enroll the org admin
      ibm.blockchain_platform.enrolled_identity:
        state: "{{ state }}"
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key | default(omit) }}"
        api_secret: "{{ api_secret | default(omit)}}"
        certificate_authority: "{{ org.ca.name }}"
        name: "{{ org.msp.admin }}"
        enrollment_id: "{{ msp_admin_info[0].enrollment_id }}"
        enrollment_secret: "{{ msp_admin_info[0].enrollment_secret }}"
        path: "{{ wallet_dir }}/{{ org.msp.admin }}.json"
      vars:
        msp_admin_info: "{{ org.ca.id_list | selectattr('name', 'equalto', org.msp.admin) | list }}"
      register: org_admin

    - name: Create organization
      ibm.blockchain_platform.organization:
        state: "{{ state }}"
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key | default(omit) }}"
        api_secret: "{{ api_secret | default(omit)}}"
        name: "{{ org.msp.name }}"
        msp_id: "{{ org.msp.id }}"
        certificate_authority: "{{ org.ca.name }}"
        registrar: "{{ wallet_dir }}/{{ org.ca.admin_name }}.json"
        admins:
          - "{{ org_admin.enrolled_identity.cert }}"

    - name: Construct peer complete information list
      set_fact:
        # Merge information in org.peers and org.ca.id_list
        peer_complete_info_list: "{{ peer_complete_info_list | default([]) + [org.peers | selectattr('name','equalto', item) | first | combine(org.ca.id_list | selectattr('name','equalto', item) | first)] }}"
      with_items:
        - "{{ org.peers | map(attribute='name') | list }}"

    - name: Create peer(s)
      ibm.blockchain_platform.peer:
        state: "{{ state }}"
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key | default(omit) }}"
        api_secret: "{{ api_secret | default(omit)}}"
        name: "{{ item.name }}"
        msp_id: "{{ org.msp.id }}"
        state_db: "{{ item.state_db }}"
        zone: "{{ item.zone | default(omit) }}"
        version: "{{ item.version | default('1.4.7-0')}}"
        certificate_authority: "{{ org.ca.name }}"
        enrollment_id: "{{ item.enrollment_id }}"
        enrollment_secret: "{{ item.enrollment_secret }}"
        admins:
          - "{{ org_admin.enrolled_identity.cert }}"
        resources:
          peer:
            requests:
              cpu: "{{ item.resource.peer.vcpu | default('300m') }}"
              memory: "{{ item.resource.peer.memory | default('300M') }}"
          proxy:
            requests:
              cpu: "{{ item.resource.proxy.vcpu | default('100m') }}"
              memory: "{{ item.resource.proxy.memory | default('200M') }}"
          couchdb:
            requests:
              cpu: "{{ item.resource.couchdb.vcpu | default('300m') }}"
              memory: "{{ item.resource.couchdb.memory | default('300M') }}"
          dind:
            requests:
              cpu: "{{ item.resource.dind.vcpu | default('300m') }}"
              memory: "{{ item.resource.dind.memory | default('300m') }}"
        storage:
          peer:
            size: "{{ item.resource.peer.storage | default('100Gi') }}"
          statedb:
            size: "{{ item.resource.couchdb.storage | default('100Gi') }}"
        wait_timeout: "{{ wait_timeout | default(1800) }}"
      with_items:
        - "{{ peer_complete_info_list }}"
