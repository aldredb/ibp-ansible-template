---
- name: Create channels
  hosts: localhost
  vars_files:
    - vars/api.yaml
    - vars/organizations.yaml
    - vars/channels.yaml
  vars:
    # os_org_name: os # load this using --extra-vars "os_org_name=os"
    # creator_org_name: org1 # load this using --extra-vars "creator_org_name=org1"
    # channel_name: samplechannel1 # load this using --extra-vars "channel_name=samplechannel1"
    ordering_service_name: "{{ vars['ordering_organization'][os_org_name]['orderer']['name'] }}"
    ordering_service_msp_admin: "{{ vars['ordering_organization'][os_org_name]['ca']['id_list'][0]['name'] }}_identity.json"
    ordering_service_msp_id: "{{ vars['ordering_organization'][os_org_name]['msp']['id'] }}"
    creator_msp_admin: "{{ vars['peer_organizations'][creator_org_name]['ca']['id_list'][0]['name'] }}_identity.json"
    creator_msp_id: "{{ vars['peer_organizations'][creator_org_name]['msp']['id'] }}"
    channel: "{{ vars['channels'][channel_name] }}"
  tasks:
    - name: Check to see if the channel already exists
      ibm.blockchain_platform.channel_block:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: fetch
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ ordering_service_msp_admin }}"
        msp_id: "{{ ordering_service_msp_id }}"
        name: "{{ channel_name }}"
        target: "0"
        path: "{{ channel_name }}_genesis_block.bin"
      register: result
      failed_when: result.msg is defined and 'NOT_FOUND' not in result.msg

    - name: Create the configuration update for the new channel
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: create
        name: "{{ channel_name }}"
        path: "{{ channel_name }}_config_update.bin"
        organizations: "{{ channel_members }}" 
        policies:
          Admins: "{{ playbook_dir }}/channel-policies/{{ channel_name }}/admins-policy.json"
          Readers: "{{ playbook_dir }}/channel-policies/{{ channel_name }}/readers-policy.json"
          Writers: "{{ playbook_dir }}/channel-policies/{{ channel_name }}/writers-policy.json"
      vars:
        # Matches the key listed in the channel.members to those of peer_organizations
        # then extract the MSP name
        channel_members: "{{ peer_organizations|
                dict2items|
                selectattr('key', 'in', channel.members)|
                list|
                map(attribute='value.msp.name')|
                list }}"
      when: result.msg is defined and 'NOT_FOUND' in result.msg

    - name: Sign the channel configuration update for the new channel
      ibm.blockchain_platform.channel_config:
        operation: sign_update
        identity: "{{ creator_msp_admin }}"
        msp_id: "{{ creator_msp_id }}"
        name: "{{ channel_name }}"
        path: "{{ channel_name }}_config_update.bin"
      when: result.msg is defined and 'NOT_FOUND' in result.msg
    
    - name: Apply the channel configuration update for the new channel
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: apply_update
        ordering_service: "{{ ordering_service_name }}"
        identity: "{{ creator_msp_admin }}"
        msp_id: "{{ creator_msp_id }}"
        name: "{{ channel_name }}"
        path: "{{ channel_name }}_config_update.bin"
      when: result.msg is defined and 'NOT_FOUND' in result.msg