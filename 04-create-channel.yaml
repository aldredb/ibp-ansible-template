---
- name: Create channels
  hosts: localhost
  vars_files:
    - vars/common.yaml
    - vars/api.yaml
    - vars/organizations.yaml
    - vars/channels.yaml
  vars:
    # os_org_name: os
    # creator_org_name: org1
    # channel_name: samplechannel1
    os_org: "{{ vars['ordering_organization'][os_org_name] }}"
    creator_org: "{{ vars['peer_organizations'][creator_org_name] }}"
    ordering_service_msp_admin: "{{ wallet_path }}/{{ os_org.msp.admin }}.json"
    creator_org_msp_admin: "{{ wallet_path }}/{{ creator_org.msp.admin }}.json"
    channel_policies_dir: "{{ channel_policies_path }}/{{ channel_name }}"
    org_config_file: "{{ playbook_dir }}/vars/channels.yaml"
  tasks:
    - name: Check to see if the channel already exists
      ibm.blockchain_platform.channel_block:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: fetch
        ordering_service: "{{ os_org.orderer.name }}"
        identity: "{{ ordering_service_msp_admin }}"
        msp_id: "{{ os_org.msp.id }}"
        name: "{{ channel_name }}"
        target: "0"
        path: "{{ channel_config_path }}/{{ channel_name }}_genesis_block.bin"
      register: result
      ignore_errors: true

    - name: Exit channel creation if it already exists
      meta: end_play
      when: result.msg is not defined or 'NOT_FOUND' not in result.msg

    - shell: |
        ORGS=$(yq r "{{ org_config_file }}" --printMode p "channels.{{ channel_name }}.members.*" | awk -F "." '{print $4}')
        for org in $ORGS; do yq r "{{ org_config_file }}" "peer_organizations.$org.msp.name"; done
      register: channel_member_result

    - set_fact:
        channel_members: "{{ channel_member_result.stdout_lines }}"

    - name: Create the configuration update for the new channel
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: create
        name: "{{ channel_name }}"
        path: "{{ channel_config_path }}/{{ channel_name }}_config_update.bin"
        organizations: "{{ channel_members }}"
        policies:
          Admins: "{{ lookup('file', '{{ channel_policies_dir }}/admins-policy.yaml') | from_yaml }}"
          Readers: "{{ lookup('file', '{{ channel_policies_dir }}/readers-policy.yaml') | from_yaml }}"
          Writers: "{{ lookup('file', '{{ channel_policies_dir }}/writers-policy.yaml') | from_yaml }}"

    - name: Sign the channel configuration update for the new channel
      ibm.blockchain_platform.channel_config:
        operation: sign_update
        identity: "{{ creator_org_msp_admin }}"
        msp_id: "{{ creator_org.msp.id }}"
        name: "{{ channel_name }}"
        path: "{{ channel_config_path }}/{{ channel_name }}_config_update.bin"

    - name: Apply the channel configuration update for the new channel
      ibm.blockchain_platform.channel_config:
        api_endpoint: "{{ api_endpoint }}"
        api_authtype: "{{ api_authtype }}"
        api_key: "{{ api_key }}"
        api_secret: "{{ api_secret | default(omit) }}"
        api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
        operation: apply_update
        ordering_service: "{{ os_org.orderer.name }}"
        identity: "{{ creator_org_msp_admin }}"
        msp_id: "{{ creator_org.msp.id }}"
        name: "{{ channel_name }}"
        path: "{{ channel_config_path }}/{{ channel_name }}_config_update.bin"
